// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// GroupSigma
Eigen::MatrixXd GroupSigma(int iter, int N, int ngroups, Eigen::VectorXd& A, Eigen::VectorXd& B, Eigen::VectorXd& init, Eigen::VectorXd& bsqn, Eigen::VectorXd m0);
RcppExport SEXP _MultiTrait_GroupSigma(SEXP iterSEXP, SEXP NSEXP, SEXP ngroupsSEXP, SEXP ASEXP, SEXP BSEXP, SEXP initSEXP, SEXP bsqnSEXP, SEXP m0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type ngroups(ngroupsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type B(BSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type init(initSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type bsqn(bsqnSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type m0(m0SEXP);
    rcpp_result_gen = Rcpp::wrap(GroupSigma(iter, N, ngroups, A, B, init, bsqn, m0));
    return rcpp_result_gen;
END_RCPP
}
// SampleVariance
Eigen::VectorXd SampleVariance(int idx, const Eigen::MatrixXd& BtB, const Eigen::VectorXd& S, const Eigen::MatrixXd& R, int M, double v, double tau, int iter, double init);
RcppExport SEXP _MultiTrait_SampleVariance(SEXP idxSEXP, SEXP BtBSEXP, SEXP SSEXP, SEXP RSEXP, SEXP MSEXP, SEXP vSEXP, SEXP tauSEXP, SEXP iterSEXP, SEXP initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type BtB(BtBSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type init(initSEXP);
    rcpp_result_gen = Rcpp::wrap(SampleVariance(idx, BtB, S, R, M, v, tau, iter, init));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MultiTrait_GroupSigma", (DL_FUNC) &_MultiTrait_GroupSigma, 8},
    {"_MultiTrait_SampleVariance", (DL_FUNC) &_MultiTrait_SampleVariance, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_MultiTrait(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
